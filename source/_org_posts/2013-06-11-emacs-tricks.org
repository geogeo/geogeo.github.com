#+BEGIN_HTML
---
layout: post
title: "emacs tricks (draft)"
date: 2013-06-11 17:17
comments: true
categories: ["emacs"]
---
#+END_HTML
#+OPTIONS: toc:nil

总结一下自己觉得有用的 emacs tricks

#+CAPTION: editors learning curve
[[http://ergoemacs.org/emacs/i/emacs_learning_curves.png]]

显然, emacs 门槛要比vim低多了, 甚至你把他当做 notepad 用也是完全可以的.
但是命令和插件巨多导致你永远到不了yoda 的境界. emacs 被 vim 用户调侃是
最好的os, vim才是最好的编辑器,就是因为可扩展性太强了.emacs插件众多,很
多扩展也源于其他优秀编辑器如vim,textmate,sublime,idea. 因此你不但需要把 os 的东西搞熟练, 还要熟
练上面的软件.

首先, 上手最好先使用 emacs-starter-kit. 里面包含了emacs各种常用的的插
件. 也就是说基本上所有可能会有用又好用的mode都已经安装了. 当然, 还是有
一些需要手动安装盒根据自己习惯调整的地方.

后来呢, 你会发现 starter-kit 弱弱的, 因为好多东西都在 24.3 集成了, 或
者都已经在 elpa 里了. 这时候, 你可以...
自己编译 Aquamacs 3.0 源代码 from [[https://github.com/davidswelt/aquamacs-emacs.git][here]]. 因为3.0 based on emacs 24.3.

下面是我觉得有用和可以装x的一些tricks.
下列提及的插件凡是没有提及地址的,都能再 epla 找到.[fn:1]

以下trick或只在 aquamacs3.0 有用, 因为我没有测试其他环境. 大部分来自
emacsrocks[fn:3] 和 emacsniftytricks[fn:4]

** Editing
*** Moving Ctrl Key
first thing first, 使用 emacs 最常用的按键当然是 =Ctrl=, 但是不幸的是
标准键位居然把这么重要一个按钮放到一个要扭曲小拇指才能够到的地方.
因此,在使用 emacs 之前,将 =Caps= 定义成 =Ctrl=, 好吧, 具体详情来读读这篇
  [[http://www.emacswiki.org/emacs/RepeatedStrainInjury][文章]], 再看看 [[http://www.pfu.fujitsu.com/hhkeyboard/][HHKB]] 的键位. 在mac下更换 =Caps= 是十分容易的,
  Preference > keyboard > modify key 底下直接改就可以了.

*** M-SPC: remove extra space
reMove Space 这个将多余的空格去掉,只留一个.
*** mark
这就算 vim 的 visual mode 吗?
- =C-x r m= :register 你的位置,给个名字,这叫bookmark, 并给他取一个名字. =C-x r b= + 名字, 回
到该bookmark
- =C-u C-SPC= :可会上个编辑的地方,上上个编辑的地方,上上上个编辑的地方...碉
  堡了吧.
- expend-region:
 Increase selected region, 可以跟 IDEA 里的 =Command w= 一样选中

*** zap-to-char
快捷键绑定  =M-z=.
zap 是消除的意思. 将光标至第一个出现你输入的字符中间都删除, 比如你的光标在 'abcdef' a 的位
置上, =M-z d= 会变成 'ef'

*** follow-mode
如果你的文件过长,但你又想要看多几行,可以split 两个或多个window, 然后 M-x follow-mode

*** iy-move-to-char
跟 vim f 的功能一样...这个比较轻量一些, 当然有了后面说的
ace-jump-mode 会让你的光标任意跳跃.
#+BEGIN_SRC
(global-set-key (kbd "C-c f") 'iy-go-to-char)
(global-set-key (kbd "C-c F") 'iy-go-to-char-backward)
#+END_SRC

*** multiple-cursor
一个比 rectange 更强势的批量编辑. sublime也有同样的功能,同时产生多个光
标同时编辑.
rectangle text =C-x r t= 可以批量编辑规整的, 但是不规整的用
multiple-cursor.

下面绑定快捷键的 lisp 比较直白, 我就不翻译了.
#+BEGIN_SRC lisp
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC

*** anything
anything 替换的是 ido mode, 包含 buffer, imenu 等一系列

*** Use M-m instead of C-a TAB
当写程序的时候我们通常知道到代码行的头,而不是本行的最开始, 不要用
=C-a TAB=, 因为 =M=m= 就是干这个的.对于写代码来说,  bind RET to
='reindent-then-newline-and-indent= 将是一劳永逸的事情.
#+BEGIN_SRC lisp
(global-set-key (kbd "RET") 'reindent-then-newline-and-indent).
#+END_SRC
- use =C-s C-w= to search current pointed word, and you can type
  several times =C-w= to select more words.
- auto-highlight-mode

*** keychord
键盘和旋. 让你定义同时按住两个键的快捷键, 或者一个按键两次.
我想没有神马别的编辑器能干这个事情了.

*** ace-jump-mode
这个 mode 也是从 vim 那边剽窃过来的, 好吧, 也可以说是 share, 因为剽窃
的话 vim 就再也没有这个插件了.

是这样玩的, 在整个 frame[fn:2], 也可以是所有 window 里, 你只需敲3下, 就可以
到你想要到达的地方.
键入 =C-c SPC= 后, mini-buff 会问你单词第一个字符是啥,键入后整个页面会
灰掉, 所有出现你输入的字符的位置会以 a-z 代替, 键入 你想去得位置的代码
即可.

#+BEGIN_QUOTE
tobe continue...以下大纲持续更新
#+END_QUOTE

** language
*** js2-mode
best javascript mode ever
*** rewrepl

*** [[https://github.com/rooney/zencoding][zencoding-mode]]
a neat way to write markup quickly in emacs
用 css selector 写 html, zencoding + yas, 这个模式其他编辑器如vim
sublime 也有插件, 非常好用.

*** ruby-mode

*** python-mode

*** [[http://web-mode.org/][web-mode]]
我认为比较好用的 web 编辑模式
快捷键好多, 有的背了, whee....

*** magit
magit 是 interactive 模式的 git 模式. 
=C-x g= 绑定到 magit-status
=s= stage this changes
=u= unstage
相应大写表示 stage/unstage 所有changes
TAB 可以显示 diff
=C=: Commit 所有 unstaged Changes
=F=: pull
=P=: push


** Appearance
*** ColorTheme
monokai theme is the best for any editor

*** power-line
跟 vim 的 powerline 一样, 让你的 mainline 带颜色[fn:2]
骚青的 mainline 可以让你一眼就知道目前工作在哪个buffer.

*** Cursor
我喜欢 _骚青的_ cursor
#+BEGIN_SRC lisp
(setq-default cursor-type 'box)
(set-cursor-color "green")
(blink-cursor-mode)
#+END_SRC
设置 color 有可能被 color theme 覆盖, 最好直接加在你用的 color theme
里.

** mist
*** org-mode
**** capture note

*** evernote-mode
see this [[http://127.0.0.1:4000/blog/2013/06/25/evernote-with-orgmode/][take evernote with orgmode]]
*** markdown-mode

*** eshell

eshell 不是 shell 在 emacs 中的 simulator, eshell 是由 lisp 写的完整
的shell.  因此, 由于emacs跨平台, eshell 也是跨平台的, 不管你是用何种操
作系统, 都一样使用. 谁说 windows 下没有好用的 shell, 因为他们都用过
eshell.

下面是我的eshell 配置
#+BEGIN_SRC lisp
;;; starter-kit-eshell.el --- Making the defaults a bit saner
;;
;; Part of the Emacs Starter Kit

(setq eshell-cmpl-cycle-completions nil
      eshell-save-history-on-exit t
      eshell-cmpl-dir-ignore "\\`\\(\\.\\.?\\|CVS\\|\\.svn\\|\\.git\\)/\\'")

(eval-after-load 'esh-opt
  '(progn
     (require 'em-prompt)
     (require 'em-term)
     (require 'em-cmpl)
     (setenv "PAGER" "cat")
     (set-face-attribute 'eshell-prompt nil :foreground "turquoise1")
     (add-hook 'eshell-mode-hook ;; for some reason this needs to be a hook
               '(lambda () (eshell/export "TERM" "dumb")))
     (when (< emacs-major-version 23)
       (add-hook 'eshell-mode-hook ;; for some reason this needs to be a hook
                 '(lambda () (define-key eshell-mode-map "\C-a" 'eshell-bol)))
       (add-to-list 'eshell-output-filter-functions 'eshell-handle-ansi-color))

     ;; TODO: submit these via M-x report-emacs-bug
     (add-to-list 'eshell-visual-commands "ssh")
     (add-to-list 'eshell-visual-commands "tail")
     (add-to-list 'eshell-command-completions-alist
                  '("gunzip" "gz\\'"))
     (add-to-list 'eshell-command-completions-alist
                  '("tar" "\\(\\.tar|\\.tgz\\|\\.tar\\.gz\\)\\'"))))

(defun eshell/cds ()
  "Change directory to the project's root."
  (eshell/cd (locate-dominating-file default-directory "src")))

(defun eshell/find (dir &rest opts)
  (find-dired dir (mapconcat 'identity opts " ")))

  (defmacro with-face (str &rest properties)
    `(propertize ,str 'face (list ,@properties)))
  
(defun shk-eshell-prompt ()
    (let ((header-bg "#7a378b"))
      (concat
       (with-face (concat (eshell/pwd) " ") :background header-bg)
       (with-face (format-time-string "(%Y-%m-%d %H:%M) " (current-time)) :background header-bg :foreground "#fff")
       (with-face
        (or (ignore-errors (format "(%s)" (vc-responsible-backend default-directory))) "")
        :background header-bg)
       (with-face "\n" :background header-bg)
       ;; (with-face user-login-name :foreground "blue")
       ;; "@"
       ;; (with-face "localhost" :foreground "green")
       (curr-dir-git-branch-string (eshell/pwd))
       (if (= eshell-last-command-status 0)
           (with-face "O(∩_∩)O~ $" :foreground "green")
         (with-face "╮o(︶︿︶)o #" :foreground "red"))
       " ")))
  (setq eshell-prompt-function 'shk-eshell-prompt)
(setq eshell-highlight-prompt nil)
(add-hook 'eshell-preoutput-filter-functions
          'ansi-color-filter-apply)

(add-hook 'eshell-preoutput-filter-functions
          'ansi-color-apply)
(defun curr-dir-git-branch-string (pwd)
  "Returns current git branch as a string, or the empty string if
PWD is not in a git repo (or the git command is not found)."
  (interactive)
  (when (locate-dominating-file pwd ".git")
    (let ((git-output (shell-command-to-string (concat "cd " pwd " && git branch | grep '\\*' | sed -e 's/^\\* //'"))))
      (concat "["
              (if (> (length git-output) 0)
                  (substring git-output 0 -1)
                "(no branch)")
              "]")
      )))

(provide 'starter-kit-eshell)
#+END_SRC

另外, eshell 模式下用 git 没有颜色, 或者是我打开的方式不对. 还是用magit好吧.

* Footnotes

[fn:1] Emacs Lisp Package Archive: 这是一个放 package 的地方, 类似
  apt-get 的源, 你可以用 list-package 列出 package 或者直接
  package-install 来安装 package. 我用的源是 http://tromey.com/elpa/
  和 http://melpa.milkbox.net

[fn:2] emacs 各种名词 看这里

[[https://www.evernote.com/shard/s23/sh/0c19ec76-9211-4c96-aa33-806ca3c870c8/a14eea2f025c6dcb30fb42ef5a8d5b06/deep/0/Screen%20Shot%202013-06-27%20at%209.47.17%20PM.png]]


[fn:3] [[http://emacsrocks.com/][emacs rocks cast]]
[fn:4] [[http://www.emacswiki.org/EmacsNiftyTricks][emacs nifty tricks]]

